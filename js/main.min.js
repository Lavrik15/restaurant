$(document).ready(function(){
    var $document = $(document);
    var $body = $("body");
    var $menu = $(".nav__wrapper");
    var $shadow = $(".nav__shadow");
    var $menu_btn = $(".nav__menu-btn");
    var $filter = $(".filter-btn");
    var $filter_shadow = $(".filter__shadow");
    var $filter_wrapper = $(".filter__wrapper");
    var $backdoor = $(".backdoor");
    var $filter_inner = $(".filter__inner");
    var $catalog = $(".catalog");
    var $order = $(".order");
    var vm_swipe = $(".vm-swipe-inner");
    var $filter_item = $(".filter__item");
    var $filter_link = $(".filter__item-link");

    set_filter_size();
    
    svg4everybody();

    $menu_btn.on("click", open_menu);
    $filter.on("click", open_filter);

    $backdoor.on("click", function(){
        close_menu();
        close_filter();
    });

    $filter_link.on("click", function (event) {
        event.preventDefault();

        close_filter();
        $filter_item.removeClass("filter__item--active");
        $(this).parent().addClass("filter__item--active");
        
        var elementClick = $(this).attr("data-scroll");
        var destination = $("." + elementClick).offset().top;
        jQuery("html:not(:animated),body:not(:animated)").animate({ scrollTop: destination }, 400);
    });

    $(window).resize(set_filter_size);
 
    $(window).resize(function() {
        if ($(window).width() < 1024) $(".swipe").vmSwipe("destroy");    
        if ($(window).width() > 1024) $(".swipe").vmSwipe({direcion: "horizontal"});
    });

    if ($(window).width() > 1024) $(".swipe").vmSwipe({ direcion: "horizontal" });

    function open_filter() {
        $filter_wrapper.addClass("filter__wrapper--active");
        $filter_shadow.removeClass("hidden");
        $backdoor.addClass("active");
        $body.toggleClass("overflow-hidden");
    }

    function close_filter() {
        $filter_wrapper.removeClass("filter__wrapper--active");
        $filter_shadow.addClass("hidden");
        $backdoor.removeClass("active");
        $body.removeClass("overflow-hidden");
    }

    function open_menu() {
        $menu.addClass("nav__wrapper--active");
        $shadow.removeClass("hidden");
        $backdoor.addClass("active");
        $body.addClass("overflow-hidden");
    }
    function close_menu() {
        $menu.removeClass("nav__wrapper--active");
        $shadow.addClass("hidden");
        $backdoor.removeClass("active");
        $body.removeClass("overflow-hidden");
    }
    function set_filter_size() {
        $filter_shadow.width($body.width() - $order.outerWidth() - 21);
    }
});

console.log("asd");
( function( $ ){
  // Constants
  var $vm_swipe = $(".vm-swipe");
  var PLUGIN_NS = 'vmSwipe',
      LEFT = 'left',
      RIGHT = 'right',
      UP = 'up',
      DOWN = 'down',
  
      NONE = 'none';
  
  var defaults = {
    direction: 'horizontal',
    inertiaMaxWidth: 1030,
    inertiaThreshold: 25,
    activeElements: [ 'a' ]
  };
  
  $.fn.vmSwipe = function( method ){
    var it = $( this ),
        plugin = it.data( PLUGIN_NS );
    
    if ( plugin && typeof method === 'string') {
      if( plugin[method] ) return plugin[method].apply( this, Array.prototype.slice.call( arguments, 1 ));
      else $.error( 'Метод с именем ' +  method + ' не существует для jQuery.vmSlider' );
    }
    else if ( plugin && typeof method === 'object' ) plugin['option'].apply( plugin, arguments );
    else if( typeof method === 'object' || !method ) return init.apply( this, arguments );
    
    return it;
  };
  
  $.fn.vmSwipe.defaults = defaults;
  
  function init( options ){
    if ( !options ) options = {};
    options = $.extend( {}, $.fn.vmSwipe.defaults, options );
    
    return this.each( function(){
      var it = $( this );
      
      var plugin = it.data( PLUGIN_NS );
      
      if ( !plugin ) {
        plugin = new VmSwipe( it, options );
        it.data( PLUGIN_NS, plugin );
      }
    });
  }
  
  function VmSwipe( element, options ){
    var options = $.extend( {}, options );
    
    var supports = {
      transition: null,
      animation: null,
      transform: null
    };
    
    var position = {
      x: 0,
      y: 0
    };
    
    // Touch properties
    var distance = 0,
        currentDistance = null,
        direction = null,
        currentDirection = null,
        duration = {},
        speed = {};
    
    // Finger data object
    var fingerData = {};
    
    // Direction of swipe (horizontal, vertical, both)
    var swipeDirection = options.direction;
    
    // Support css properties
    support( supports );
    
    // Track times
    var startTime = 0,
        endTime = 0,
        endMoveTime = 0;
  
    // Inertia mobile
    var withoutInertia,
        startTimeMobile;
    
    // Add wrapper
    wrapContent( element );
    var innerWrapper = element.find( '.vm-swipe-inner' );
    
    try {
      element.on( 'touchstart.vmswipe mousedown.vmswipe', touchStart );
      element.on( 'touchcancel.vmswipe', touchEnd );
    }
    catch( event ){
      $.error( 'events not supported on jQuery.swipe' );
    }
    
    // Public methods
    this.destroy = function(){
      removeListeners();
      element.data( PLUGIN_NS, null );
      innerWrapper.children().unwrap();
    };
    this.refresh = function(){
      switch( swipeDirection ){
        case 'horizontal':
          innerWrapper.width( getWrapperWidth( innerWrapper ) );
          position.x = getPosition( innerWrapper.outerWidth(), element.outerWidth(), position.x );
          break;
          
        case 'vertical':
          innerWrapper.height( getWrapperHeight( innerWrapper ) );
          position.y = getPosition( innerWrapper.outerHeight(), element.outerHeight(), position.y );
          break;
          
        case 'both':
          innerWrapper.width( getWrapperWidth( innerWrapper ) );
          innerWrapper.height( getWrapperHeight( innerWrapper ) );
          position.x = getPosition( innerWrapper.outerWidth(), element.outerWidth(), position.x );
          position.y = getPosition( innerWrapper.outerHeight(), element.outerHeight(), position.y );
          break;
      }
  
      innerWrapper.css({ 'transform': 'translate3d(' + position.x  + 'px, ' + position.y  + 'px, 0px)' });
    };
    
    function touchStart( event ){
      // Check if this element matches any in the excluded elements selectors, or its parent is excluded, if so, DON'T swipe
      if( isActiveElements( $( event.target ) ) ) return;
  
      event.preventDefault();
      event = event.originalEvent ? event.originalEvent : event;

      var touches = event.touches;
      event = touches ? touches[0] : event;

      distance = 0;
      currentDistance = 0;
      direction = null;
      currentDirection = null;
      duration = {};
      startTime = 0;
      endTime = 0;
      speed = {};
      withoutInertia = null;
      startTimeMobile = 0;

      element.toggleClass( 'moving', event.type === 'mousedown');

      getCurrentPosition();
      createFingerData( event );

      innerWrapper.stop();

      $( document ).on( 'touchend.vmswipe mouseup.vmswipe', $.proxy( touchEnd, element ) );
      $( document ).on( 'touchmove.vmswipe mousemove.vmswipe', $.proxy( touchMove, element ) );
    }
    function touchMove( event ){
      event = event.originalEvent ? event.originalEvent : event;
      
      var touches = event.touches;
      event = touches ? touches[0] : event;
      
      updateFingerData( event );
      startSwipeTime();
      
      endTime = endMoveTime = getTimeStamp();
      currentDirection = calculateDirection( fingerData.last, fingerData.end );
      currentDistance = calculateCurrentDistance( fingerData.end, fingerData.last );
      distance = calculateCurrentDistance( fingerData.end, fingerData.start );
      withoutInertia = isReallyFingerMoving();
      
      changePosition( innerWrapper, currentDirection, currentDistance, position );
    }
    function touchEnd(){
      endTime = getTimeStamp();
      duration = calculateDuration();
      speed = calculateSpeed( distance, duration );
  
      inertia();
      element.removeClass( 'moving' );
      
      $( document ).off( 'touchmove.vmswipe mousemove.vmswipe', $.proxy( touchMove, element ) );
      $( document ).off( 'touchend.vmswipe mouseup.vmswipe', $.proxy( touchEnd, element ) );
    }
    
    winWidthResize( null, function(){
      switch( swipeDirection ){
        case 'horizontal':
          position.x = getPosition( innerWrapper.outerWidth(), element.outerWidth(), position.x );
          break;
    
        case 'vertical':
          position.y = getPosition( innerWrapper.outerHeight(), element.outerHeight(), position.y );
          break;
    
        case 'both':
          position.x = getPosition( innerWrapper.outerWidth(), element.outerWidth(), position.x );
          position.y = getPosition( innerWrapper.outerHeight(), element.outerHeight(), position.y );
          break;
      }
  
      innerWrapper.css({ 'transform': 'translate3d(' + position.x  + 'px, ' + position.y  + 'px, 0px)' });
    });
    
    
    // Helpers
    function winWidthResize( context, func ){
      var timerId,
          windowWidth = $( window ).width(),
          arg = [].slice.call( arguments, 2 );
      
      $( window ).resize( function(){
        if ( windowWidth === $( window ).width() ) return;
        if( timerId ) clearTimeout( timerId );
        
        windowWidth = $( window ).width();
        
        // This function was called once after resize event
        timerId = setTimeout( function(){
          func.apply( context, arg );
          clearTimeout( timerId );
        }, 150);
      });
    }
    function getCurrentPosition(){
      if( supports.transform ){
        position = innerWrapper.css( 'transform' ).replace( /.*\(|\)| /g, '' ).split( ',' );
        position = {
          x: +position[position.length === 16 ? 12 : 4],
          y: +position[position.length === 16 ? 13 : 5]
        };
      }
      else{
        position = innerWrapper.position();
        position = {
          x: +position.left,
          y: +position.top
        };
      }
    }
    function wrapContent( element ){
      element.contents().wrapAll( createWrapper() );
    }
    function createWrapper(){
      var wrapper = $( '<div />',{
        'class': 'vm-swipe-inner'
      });
      wrapper.css({
        'width': ( options.direction === 'horizontal' || options.direction === 'both' ) ? getWrapperWidth( element ) : '',
        'height': ( options.direction === 'vertical' || options.direction === 'both' ) ? getWrapperHeight( element ) : '',
        'transform': 'translate3d(0px, 0px, 0px)'
      
      });
      return wrapper;
    }
    function getWrapperWidth( element ){
      var width = 0;
    
      element.find($vm_swipe).children().each( function(){
        var it = $( this );
        width += it.outerWidth( true );
      });
      return width + 120;
    }
    function getWrapperHeight( element ){
      var height = 0;
    
      element.children().each( function(){
        var it = $( this );
        height += it.outerHeight( true );
      });
    
      return height;
    }
    function createFingerData( event ) {
      var f = {
        start: {
          x: 0,
          y: 0
        },
        last: {
          x: 0,
          y: 0
        },
        end: {
          x: 0,
          y: 0
        }
      };
      f.start.x = f.last.x = f.end.x = event.pageX || event.clientX;
      f.start.y = f.last.y = f.end.y = event.pageY || event.clientY;
      fingerData = f;
      return f;
    }
    function updateFingerData( event ){
      if ( !Object.keys( fingerData ).length ) createFingerData( event );
      
      fingerData.last.x = fingerData.end.x;
      fingerData.last.y = fingerData.end.y;
      
      fingerData.end.x = event.pageX || event.clientX;
      fingerData.end.y = event.pageY || event.clientY;
      
      return fingerData;
    }
    function changePosition( innerWrapper, currentDirection, currentDistance, position ){
      switch( swipeDirection ){
        case 'horizontal':
          if( currentDirection === 'up' || currentDirection === 'down' ) return;
          position.x += currentDistance.x;
          position.x = getPosition( innerWrapper.outerWidth(), element.outerWidth(), position.x );
          break;
  
        case 'vertical':
          if( currentDirection === 'left' || currentDirection === 'right' ) return;
          position.y += currentDistance.y;
          position.y = getPosition( innerWrapper.outerHeight(), element.outerHeight(), position.y );
          break;
  
        case 'both':
          position.x += currentDistance.x;
          position.y += currentDistance.y;
          position.x = getPosition( innerWrapper.outerWidth(), element.outerWidth(), position.x );
          position.y = getPosition( innerWrapper.outerHeight(), element.outerHeight(), position.y );
          break;
      }
      
      innerWrapper.css({ 'transform': 'translate3d(' + position.x + 'px, ' + position.y + 'px, 0px)' });
    }
    function getPosition( wrapperDimensions, elementDimentions, position ){
      if( wrapperDimensions <= elementDimentions ) return 0;
      if( position > 0 ) position = 0;
      if( Math.abs( position ) > ( wrapperDimensions - elementDimentions ) ) position = -( wrapperDimensions - elementDimentions );
      return position;
    }
    function support( values ){
      var styles = $( '<support />' ).get( 0 ).style;
      $.each( values, function( key, value ){
        if( styles[key] !== undefined ) values[key] = true;
      });
    }
    function getTimeStamp() {
      return new Date().getTime();
    }
    function calculateDirection( startPoint, endPoint ){
      if( comparePoints( startPoint, endPoint ) ) return NONE;
      
      var angle = calculateAngle( startPoint, endPoint );
      
      if( ( angle <= 45 ) && ( angle >= 0 ) ) return LEFT;
      else if( ( angle <= 360 ) && ( angle >= 315 ) ) return LEFT;
      else if( ( angle >= 135 ) && ( angle <= 225 ) ) return RIGHT;
      else if( ( angle > 45 ) && ( angle < 135 ) ) return DOWN;
      else return UP;
    }
    function comparePoints( pointA, pointB ){
      return ( pointA.x === pointB.x && pointA.y === pointB.y );
    }
    function calculateAngle( startPoint, endPoint ){
      var x = startPoint.x - endPoint.x,
          y = endPoint.y - startPoint.y,
          r = Math.atan2( y, x ), //radians
          angle = Math.round( r * 180 / Math.PI ); //degrees
      
      //ensure value is positive
      if( angle < 0 ) angle = 360 - Math.abs(angle);
      
      return angle;
    }
    function calculateCurrentDistance( startPoint, endPoint ){
      return {
        x: startPoint.x - endPoint.x,
        y: startPoint.y - endPoint.y
      }
    }
    function calculateSpeed( distance, time ){
      return {
        x: distance.x / time,
        y: distance.y / time
      }
    }
    function calculateDuration() {
      var duration;
      if( !startTime ) duration = 0;
      else duration = endTime - startTime;
      return duration;
    }
    function removeListeners(){
      $( document ).off( '.vmswipe' );
      element.off( '.vmswipe' );
    }
    function startSwipeTime(){
      if( endTime )return;
      startTime = getTimeStamp();
    }
    function isReallyFingerMoving(){
      var currentTimeMobile = getTimeStamp(),
          absDistance,
          deltaTime;
    
      if( !startTimeMobile ) startTimeMobile = currentTimeMobile;
  
      switch( swipeDirection ){
        case 'horizontal':
          absDistance = Math.abs( fingerData.end.x - fingerData.last.x );
          break;
  
        case 'vertical':
          absDistance = Math.abs( fingerData.end.y - fingerData.last.y );
          break;
  
        case 'both':
          absDistance = Math.max( Math.abs( fingerData.end.x - fingerData.last.x ), Math.abs( fingerData.end.y - fingerData.last.y ) );
          break;
      }
      
      deltaTime = currentTimeMobile - startTimeMobile;
      return ( absDistance < 10 ) && ( deltaTime > 100 );
    }
    function inertia(){
      var absDistance;
    
      switch( swipeDirection ){
        case 'horizontal':
          absDistance = Math.abs( distance.x );
          break;
      
        case 'vertical':
          absDistance = Math.abs( distance.y );
          break;
      
        case 'both':
          absDistance = Math.max( Math.abs( distance.x ), Math.abs( distance.y ) );
          break;
      }
      
      var isTimeForInertia = ( endTime - endMoveTime ) < 50;
      var isWidthForInertia = $( window ).width() <= options.inertiaMaxWidth;
      var isDistanceForInertia = absDistance > options.inertiaThreshold;
    
      if( ( isTimeForInertia && !withoutInertia ) && isWidthForInertia && isDistanceForInertia ) getInertia();
    }
    function getInertia(){
      innerWrapper.css({'text-indent': 100});
      innerWrapper.animate({
        textIndent: 0
      },
      {
        duration: ( Math.max( Math.abs( speed.x ), Math.abs( speed.y ) ) * 5000 ),
        step: function( currentStep ){
          var thisStepTime = getTimeStamp(),
              stepDuration = thisStepTime - endTime;
          
          endTime = thisStepTime;
          speed.x *= currentStep / 100;
          speed.y *= currentStep / 100;
  
          currentDistance.x = speed.x * stepDuration;
          currentDistance.y = speed.y * stepDuration;
    
          changePosition( innerWrapper, currentDirection, currentDistance, position );
        }
      });
    }
    function isActiveElements( element ){
      for( var i = 0, l = options.activeElements.length; i < l; i++ ){
        if( element.closest( options.activeElements[i], innerWrapper ).length ) return true;
      }
      return false;
    }
    function calculateDistance( startPoint, endPoint ){
      return Math.round( Math.sqrt( Math.pow( endPoint.x - startPoint.x, 2 ) + Math.pow( endPoint.y - startPoint.y, 2 ) ) );
    }
  }
  
})( jQuery );
$(document).ready(function(){
    var $body = $("body");
    var $popup_open_btn = $(".catalog__item-more");
    var $catalog_image = $(".catalog__image");
    var $popup_close_btn = $(".popup__close");
    var $header = $(".header"); 
    var $main = $(".main"); 
    var $popup = $(".popup");
    var $backdoor = $(".backdoor");

    $backdoor.on("click", function() {
        backdoor_blur_off();
        backdoor_off();
        close_popup();
    });
    $catalog_image.on("click", function () {
        $body.addClass("overflow-hidden padding-scroll");
        backdoor_on();
        backdoor_blur_on();
        open_popup();
    });
    $popup_open_btn.on("click", function(){
        $body.addClass("overflow-hidden padding-scroll");
        backdoor_on();
        backdoor_blur_on();
        open_popup();
    });
    $popup_close_btn.on("click", function(){
        $body.removeClass("overflow-hidden padding-scroll");
        backdoor_off();
        backdoor_blur_off();
        close_popup();
    });

    function backdoor_on() {
        $backdoor.addClass("active");
    }
    function backdoor_off() {
        $backdoor.removeClass("active");
    }
    function backdoor_blur_on() {
        $header.addClass("filter-blur");
        $main.addClass("filter-blur");
    }
    function backdoor_blur_off() {
        $header.removeClass("filter-blur");
        $main.removeClass("filter-blur");
    }
    function open_popup() {
        $popup.addClass("popup--active");
    }
    function close_popup() {
        $popup.removeClass("popup--active");
    }
});
!function (root, factory) {
    "function" == typeof define && define.amd ? // AMD. Register as an anonymous module unless amdModuleId is set
        define([], function () {
            return root.svg4everybody = factory();
        }) : "object" == typeof module && module.exports ? // Node. Does not work with strict CommonJS, but
            // only CommonJS-like environments that support module.exports,
            // like Node.
            module.exports = factory() : root.svg4everybody = factory();
}(this, function () {
    /*! svg4everybody v2.1.9 | github.com/jonathantneal/svg4everybody */
    function embed(parent, svg, target) {
        // if the target exists
        if (target) {
            // create a document fragment to hold the contents of the target
            var fragment = document.createDocumentFragment(), viewBox = !svg.hasAttribute("viewBox") && target.getAttribute("viewBox");
            // conditionally set the viewBox on the svg
            viewBox && svg.setAttribute("viewBox", viewBox);
            // copy the contents of the clone into the fragment
            for (// clone the target
                var clone = target.cloneNode(!0); clone.childNodes.length;) {
                fragment.appendChild(clone.firstChild);
            }
            // append the fragment into the svg
            parent.appendChild(fragment);
        }
    }
    function loadreadystatechange(xhr) {
        // listen to changes in the request
        xhr.onreadystatechange = function () {
            // if the request is ready
            if (4 === xhr.readyState) {
                // get the cached html document
                var cachedDocument = xhr._cachedDocument;
                // ensure the cached html document based on the xhr response
                cachedDocument || (cachedDocument = xhr._cachedDocument = document.implementation.createHTMLDocument(""),
                    cachedDocument.body.innerHTML = xhr.responseText, xhr._cachedTarget = {}), // clear the xhr embeds list and embed each item
                    xhr._embeds.splice(0).map(function (item) {
                        // get the cached target
                        var target = xhr._cachedTarget[item.id];
                        // ensure the cached target
                        target || (target = xhr._cachedTarget[item.id] = cachedDocument.getElementById(item.id)),
                            // embed the target into the svg
                            embed(item.parent, item.svg, target);
                    });
            }
        }, // test the ready state change immediately
            xhr.onreadystatechange();
    }
    function svg4everybody(rawopts) {
        function oninterval() {
            // while the index exists in the live <use> collection
            for (// get the cached <use> index
                var index = 0; index < uses.length;) {
                // get the current <use>
                var use = uses[index], parent = use.parentNode, svg = getSVGAncestor(parent), src = use.getAttribute("xlink:href") || use.getAttribute("href");
                if (!src && opts.attributeName && (src = use.getAttribute(opts.attributeName)),
                    svg && src) {
                    if (polyfill) {
                        if (!opts.validate || opts.validate(src, svg, use)) {
                            // remove the <use> element
                            parent.removeChild(use);
                            // parse the src and get the url and id
                            var srcSplit = src.split("#"), url = srcSplit.shift(), id = srcSplit.join("#");
                            // if the link is external
                            if (url.length) {
                                // get the cached xhr request
                                var xhr = requests[url];
                                // ensure the xhr request exists
                                xhr || (xhr = requests[url] = new XMLHttpRequest(), xhr.open("GET", url), xhr.send(),
                                    xhr._embeds = []), // add the svg and id as an item to the xhr embeds list
                                    xhr._embeds.push({
                                        parent: parent,
                                        svg: svg,
                                        id: id
                                    }), // prepare the xhr ready state change event
                                    loadreadystatechange(xhr);
                            } else {
                                // embed the local id into the svg
                                embed(parent, svg, document.getElementById(id));
                            }
                        } else {
                            // increase the index when the previous value was not "valid"
                            ++index, ++numberOfSvgUseElementsToBypass;
                        }
                    }
                } else {
                    // increase the index when the previous value was not "valid"
                    ++index;
                }
            }
            // continue the interval
            (!uses.length || uses.length - numberOfSvgUseElementsToBypass > 0) && requestAnimationFrame(oninterval, 67);
        }
        var polyfill, opts = Object(rawopts), newerIEUA = /\bTrident\/[567]\b|\bMSIE (?:9|10)\.0\b/, webkitUA = /\bAppleWebKit\/(\d+)\b/, olderEdgeUA = /\bEdge\/12\.(\d+)\b/, edgeUA = /\bEdge\/.(\d+)\b/, inIframe = window.top !== window.self;
        polyfill = "polyfill" in opts ? opts.polyfill : newerIEUA.test(navigator.userAgent) || (navigator.userAgent.match(olderEdgeUA) || [])[1] < 10547 || (navigator.userAgent.match(webkitUA) || [])[1] < 537 || edgeUA.test(navigator.userAgent) && inIframe;
        // create xhr requests object
        var requests = {}, requestAnimationFrame = window.requestAnimationFrame || setTimeout, uses = document.getElementsByTagName("use"), numberOfSvgUseElementsToBypass = 0;
        // conditionally start the interval if the polyfill is active
        polyfill && oninterval();
    }
    function getSVGAncestor(node) {
        for (var svg = node; "svg" !== svg.nodeName.toLowerCase() && (svg = svg.parentNode);) { }
        return svg;
    }
    return svg4everybody;
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
